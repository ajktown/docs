pipeline {
  agent any
  parameters {
    booleanParam(name: 'SKIP_TEST', defaultValue: false, description: 'By enabling this flag, the test will be skipped and pushed to the production server (Not Recommended)')
    // SKIP_BUILD parameters:
    // - Related validation named "Validating SKIP_BUILD Parameters ..."
    booleanParam(name: 'SKIP_BUILD_API', defaultValue: false, description: 'ðŸŸ¡ TODO: Not Yet Implemented; By enabling this flag, pipeline will skip the API build and push to the production server')
    booleanParam(name: 'SKIP_BUILD_WGT', defaultValue: false, description: 'By enabling this flag, pipeline will skip the WGT build and push to the production server')
    booleanParam(name: 'SKIP_BUILD_CGT', defaultValue: false, description: 'ðŸŸ¡ TODO: Not Yet Implemented; By enabling this flag, pipeline will skip the CGT build and push to the production server')
  }
  environment {
    // Binary Paths:
    YARN_INSTALLED_PATH="/opt/homebrew/bin" // Get this from the following command: $ which yarn
    DOCKER_INSTALLED_PATH="/usr/local/bin" // Get this from the following command: $ which docker
    // Git:
    GIT_REPO_URL="https://github.com/ajktown/wordnote.git"
    CLONED_REPO_DIR_NAME="cloned_repo_dir"
    // ODIC Provider:
    JWT_CREDENTIAL_ID = '141ad962-6926-46af-9c32-4fe9ec500dbe'  // Replace with your actual Credential ID
    // DockerHub:
    DOCKER_HUB_PUSHER_ACCESS_TOKEN = credentials("LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN") // Corrected credential syntax
    BUILDING_IMAGE_NAME="ajktown/wordnote:latest"
    // AWS:
    AWS_LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN = "AWS_LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN" // Corrected credential syntax
    AWS_REGION = "ap-northeast-1"  // Tokyo region
    INSTANCE_ID = "i-0ebe1d5ea7495f70d"
  }
  stages {
    // ! ======================================== CLEANING STAGE ======================================== ! //
    stage('Clean Up') {
      steps {
        echo 'Cleaning up ...'
        deleteDir()
      }
    }
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ CLEANING STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ CLEANING STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //


    // ! ======================================== VALIDATION STAGE ======================================== ! //
    stage('Validating SKIP_BUILD Parameters ...') {
      steps {
        script {
          // if everything is true for skip build, throw an error and stop the pipeline with message one of them must be enabled!
          if (params.SKIP_BUILD_API == true && params.SKIP_BUILD_WGT == true && params.SKIP_BUILD_CGT == true) {
            error("Failed to proceed: At least one of the parameters [SKIP_BUILD_API, SKIP_BUILD_WGT, SKIP_BUILD_CGT] must be disabled.")
          }
        }
      }
    }

    stage('Validating environment [LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN] is available') {
      steps {
        script {
          if (env.DOCKER_HUB_PUSHER_ACCESS_TOKEN == null || env.DOCKER_HUB_PUSHER_ACCESS_TOKEN == "") {
            error("Failed to proceed: Required environment variable [DOCKER_HUB_PUSHER_ACCESS_TOKEN] is missing. Please add it to the Jenkins Credential Store.")
          }
        }
      }
    }

    stage('Validating injected JWT from OIDC Provider ...') {
      steps {
        script {
          withCredentials([string(credentialsId: env.JWT_CREDENTIAL_ID, variable: 'JWT')]) {
            echo "JWT Retrieved Successfully!"
            sh 'echo $JWT > /tmp/jwt_debug.jwt'
          }
          sh 'cat /tmp/jwt_debug.jwt'  // This will print the JWT without masking!

          if (fileExists('/tmp/jwt_debug.jwt') && fileSize('/tmp/jwt_debug.jwt') == 0) {
            error("Failed to proceed: JWT is empty. Please check the Jenkins Credential Store.")
          }
        }
      }
    }
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ VALIDATION STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ VALIDATION STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //


    // ! ======================================== PREPARING STAGE ======================================== ! //
    stage("Cloning GitHub Repo ...") {
      steps {
        echo "Cloning the GitHub repository ..."
        sh "git clone ${env.GIT_REPO_URL} ${env.CLONED_REPO_DIR_NAME}"
        sh "ls -al ${env.CLONED_REPO_DIR_NAME}"
      }
    }
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PREPARING STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PREPARING STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //


    stage('Inspect (Test) cloned repository before building') {
      steps {
        echo 'Inspecting ...'
        dir("${env.CLONED_REPO_DIR_NAME}") { // Fixed variable usage
          sh '''
          PATH="${YARN_INSTALLED_PATH}:${PATH}" yarn --version
          PATH="${YARN_INSTALLED_PATH}:${PATH}" yarn install
          # test only SKIP_TEST is NOT true
          if [ "${SKIP_TEST}" = false ]; then
            PATH="${YARN_INSTALLED_PATH}:${PATH}" yarn test
            PATH="${YARN_INSTALLED_PATH}:${PATH}" yarn inspect
          else
            echo "Skipping the test ..."
          fi

          # The build must be at least completed to be able to push the image to the DockerHub. So the SKIP_TEST flag is not applied here:
          PATH="${YARN_INSTALLED_PATH}:${PATH}" yarn build
          '''
        }
      }
    }

    stage('Push to DockerHub Registry') {
      steps {
        echo 'Login and Pushing image ...'
        dir("${env.CLONED_REPO_DIR_NAME}") { // Fixed variable usage
          sh '''
          echo ${DOCKER_HUB_PUSHER_ACCESS_TOKEN} | ${DOCKER_INSTALLED_PATH}/docker login --username ajktown --password-stdin
          ${DOCKER_INSTALLED_PATH}/docker build -t ${BUILDING_IMAGE_NAME} .
          ${DOCKER_INSTALLED_PATH}/docker push ${BUILDING_IMAGE_NAME}
          '''
        }
      }
    }

  stage('Reboot EC2 Instance') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: env.AWS_LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
              sh '''
              AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${DOCKER_INSTALLED_PATH}/aws \
                ec2 reboot-instances \
                --instance-ids $INSTANCE_ID \
                --region $AWS_REGION
              '''
          }
        }
      }
    }
  }
}
