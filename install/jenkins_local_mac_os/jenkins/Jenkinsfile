// TODO: 游리 Comment me
def cloneScript(repoUrl, dirName) {
  return """
    git clone ${repoUrl} ${dirName}
    ls -al ${dirName}
  """
}

// TODO: 游리 Comment me
def inspectAndBuildScript(skipTestFlag, yarnPath = "/opt/homebrew/bin") {
  return """
    PATH="${yarnPath}:\$PATH" yarn --version
    PATH="${yarnPath}:\$PATH" yarn install

    # test only SKIP_TEST is NOT true
    if [ "${skipTestFlag}" = false ]; then
      PATH="${yarnPath}:\$PATH" yarn test
      PATH="${yarnPath}:\$PATH" yarn inspect
    else
      echo "Skipping the test"
    fi

    # The build must be at least completed to be able to push the image to the DockerHub.
    # So the SKIP_TEST flag is NOT applied here:
    PATH="${yarnPath}:\$PATH" yarn build
  """
}

// TODO: 游리 Comment me
def dockerPushScript(dockerPath, accessToken, imageName) {
  return """
    # Login to DockerHub using access token (password-stdin method)
    echo ${accessToken} | ${dockerPath}/docker login --username ajktown --password-stdin

    # Build Docker image
    ${dockerPath}/docker build -t ${imageName} .

    # Push image to DockerHub
    ${dockerPath}/docker push ${imageName}
  """
}

pipeline {
  agent any
  parameters {
    //
    booleanParam(name: 'SKIP_REBOOT', defaultValue: true, description: 'By enabling this flag, DockerHub (https://hub.docker.com/u/ajktown) will have the latest image, but running pods in production won\'t restart. This flag is enabled by default so that builders accidentally don\'t restart the production server. Uncheck this flag to restart the production server.')
    booleanParam(name: 'SKIP_TEST', defaultValue: true /* 游리 TODO: Make back to false before merge*/, description: 'By enabling this flag, the test will be skipped and pushed to the production server (Not Recommended)')
    // SKIP_BUILD parameters:
    // - Related validation named "Validate SKIP_BUILD Parameters"
    booleanParam(name: 'SKIP_BUILD_API', defaultValue: false, description: '游리 TODO: Not Yet Implemented; By enabling this flag, pipeline will skip the API build and push to the production server')
    booleanParam(name: 'SKIP_BUILD_CGT', defaultValue: false, description: '游리 TODO: Not Yet Implemented; By enabling this flag, pipeline will skip the CGT build and push to the production server')
    booleanParam(name: 'SKIP_BUILD_WGT', defaultValue: false, description: 'By enabling this flag, pipeline will skip the WGT build and push to the production server')
    // SKIP_REFRESH
  }
  environment {
    // Binary Paths:
    YARN_INSTALLED_PATH="/opt/homebrew/bin" // Get this from the following command: $ which yarn
    DOCKER_INSTALLED_PATH="/usr/local/bin" // Get this from the following command: $ which docker
    // Git:
    GIT_REPO_URL_API="https://github.com/ajktown/api.git"
    GIT_REPO_URL_CGT="https://github.com/ajktown/ConsistencyGPT.git"
    GIT_REPO_URL_WGT="https://github.com/ajktown/wordnote.git"
    GIT_REPO_CLONED_DIR_NAME_API="cloned_api"
    GIT_REPO_CLONED_DIR_NAME_CGT="cloned_cgt"
    GIT_REPO_CLONED_DIR_NAME_WGT="cloned_wgt"
    // ODIC Provider:
    JWT_CREDENTIAL_ID = '141ad962-6926-46af-9c32-4fe9ec500dbe'  // Replace with your actual Credential ID
    // DockerHub (https://hub.docker.com/u/ajktown):
    DOCKER_HUB_PUSHER_ACCESS_TOKEN = credentials("LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN") // Corrected credential syntax
    BUILDING_IMAGE_NAME_API="ajktown/api:latest"
    BUILDING_IMAGE_NAME_CGT="ajktown/consistency:latest"
    BUILDING_IMAGE_NAME_WGT="ajktown/wordnote:latest"
    // AWS:
    AWS_LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN = "AWS_LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN" // Corrected credential syntax
    AWS_REGION = "ap-northeast-1"  // Tokyo region
    INSTANCE_ID = "i-0ebe1d5ea7495f70d"
  }
  stages {
    // ! ======================================== CLEANING-UP STAGE ======================================== ! //
    stage('Clean Up') {
      steps {
        echo 'Cleaning up'
        deleteDir()
      }
    }
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ CLEANING-UP STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ CLEANING-UP STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //


    // ! ======================================== VALIDATION STAGE ======================================== ! //
    stage('Validate preconditions') {
      parallel {
        stage('Validate SKIP_BUILD Parameters') {
          steps {
            script {
              // if everything is true for skip build, throw an error and stop the pipeline with message one of them must be enabled!
              if (params.SKIP_BUILD_API == true && params.SKIP_BUILD_WGT == true && params.SKIP_BUILD_CGT == true) {
                error("Failed to proceed: At least one of the parameters [SKIP_BUILD_API, SKIP_BUILD_WGT, SKIP_BUILD_CGT] must be disabled.")
              }
            }
          }
        }

        stage('Validate environment [LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN] is available') {
          steps {
            script {
              if (env.DOCKER_HUB_PUSHER_ACCESS_TOKEN == null || env.DOCKER_HUB_PUSHER_ACCESS_TOKEN == "") {
                error("Failed to proceed: Required environment variable [DOCKER_HUB_PUSHER_ACCESS_TOKEN] is missing. Please add it to the Jenkins Credential Store.")
              }
            }
          }
        }

        stage('Validate injected JWT from OIDC Provider') {
          steps {
            script {
              withCredentials([string(credentialsId: env.JWT_CREDENTIAL_ID, variable: 'JWT')]) {
                echo "JWT Retrieved Successfully!"
                sh 'echo $JWT > /tmp/jwt_debug.jwt'
              }
              sh 'cat /tmp/jwt_debug.jwt'  // This will print the JWT without masking!

              if (!fileExists('/tmp/jwt_debug.jwt')) {
                error("Failed to proceed: JWT is empty. Please check the Jenkins Credential Store.")
              }
            }
          }
        }
      }
    }
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ VALIDATION STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ VALIDATION STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //


    // ! ======================================== PREPARING STAGE ======================================== ! //
    stage("Push to DockerHub https://hub.docker.com/u/ajktown") {
      parallel {
        stage("Push to ajktown/api:latest") {
          when {
            expression { params.SKIP_BUILD_API != true }
          }
          steps {
            sh cloneScript(env.GIT_REPO_URL_API, env.GIT_REPO_CLONED_DIR_NAME_API)
            dir("${env.GIT_REPO_CLONED_DIR_NAME_API}") {
              sh inspectAndBuildScript(params.SKIP_TEST, env.YARN_INSTALLED_PATH)
              sh dockerPushScript(env.DOCKER_INSTALLED_PATH, env.DOCKER_HUB_PUSHER_ACCESS_TOKEN, env.BUILDING_IMAGE_NAME_API)
            }
          }
        }
        stage("Push to ajktown/consistency:latest") {
          when {
            expression { params.SKIP_BUILD_CGT != true }
          }
          steps {
            sh cloneScript(env.GIT_REPO_URL_CGT, env.GIT_REPO_CLONED_DIR_NAME_CGT)
            dir("${env.GIT_REPO_CLONED_DIR_NAME_CGT}") {
              sh inspectAndBuildScript(params.SKIP_TEST, env.YARN_INSTALLED_PATH)
              sh dockerPushScript(env.DOCKER_INSTALLED_PATH, env.DOCKER_HUB_PUSHER_ACCESS_TOKEN, env.BUILDING_IMAGE_NAME_CGT)
            }
          }
        }
        stage("Push to ajktown/wordnote:latest") {
          when {
            expression { params.SKIP_BUILD_WGT != true }
          }
          steps {
            sh cloneScript(env.GIT_REPO_URL_WGT, env.GIT_REPO_CLONED_DIR_NAME_WGT)
            dir("${env.GIT_REPO_CLONED_DIR_NAME_WGT}") {
              sh inspectAndBuildScript(params.SKIP_TEST, env.YARN_INSTALLED_PATH)
              sh dockerPushScript(env.DOCKER_INSTALLED_PATH, env.DOCKER_HUB_PUSHER_ACCESS_TOKEN, env.BUILDING_IMAGE_NAME_WGT)
            }
          }
        }
      }
    }
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PREPARING STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PREPARING STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //


    // ! ======================================== PRODUCTION IMPACT STAGE ======================================== ! //
    stage('Reboot EC2 Instance') {
      when {
        expression { params.SKIP_REBOOT != true }
      }
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: env.AWS_LOCAL_AJ_MAC_JENKINS_ACCESS_TOKEN, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
              sh '''
              AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} ${DOCKER_INSTALLED_PATH}/aws \
                ec2 reboot-instances \
                --instance-ids $INSTANCE_ID \
                --region $AWS_REGION
              '''
          }
        }
      }
    }
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PRODUCTION IMPACT STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //
    // ! ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PRODUCTION IMPACT STAGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ! //
  }
}
